### BEGIN 19 - AUTOGENERATED, DO NOT EDIT!
EX_CANTCREAT=73		# can't create output
EX_CONFIG=78		# configuration problem
EX_DATAERR=65		# incorrect input data
EX_IOERR=74		# error during file I/O
EX_NOHOST=68		# unknown host
EX_NOINPUT=66		# unavailable/inaccessible input
EX_NOPERM=77		# not enough permissions (out of file perms)
EX_NOTFOUND=127		# missing data (as per POSIX 2)
EX_NOUSER=67		# unknown user
EX_OK=0			# no error
EX_OSERR=71		# OS error
EX_OSFILE=72		# missing/inaccessible file
EX_PROTOCOL=76		# illegal/invalid/not understood protocol exchange
EX_SOFTWARE=70		# internal error
EX_TEMPFAIL=75		# temporary failure
EX_UNAVAILABLE=69 	# required service unavailable
EX_USAGE=64		# command used incorrectly
#
EX_THROWN=19		# this is not standard, arbitrary thrown error

# Helpers for message handling.

MESSAGE_DOMAIN_=${0##*/}

message () {
	# pretty-print messages of arbitrary length
	echo "$*" | fmt -t -w ${COLUMNS:-120} >&2
}

messagen () {
	# pretty-print messages of arbitrary length
	printf "$*" >&2
}


messagehili () {
	tput smso; message "$*"; tput rmso
}

messagenhili () {
	tput smso; messagen "$*"; tput rmso
}

warn () {
	message_ "W: $*"
}

die () {
	message_ "E: $*"
	exit ${EX_THROWN:-19}
}

verbose () {
	:
}

internalerror () {
	# exit script with error; essentially a "THIS SHOULD NEVER HAPPEN"
	# message
	message_ "internal error: $*"
	exit ${EX_SOFTWARE:-70}
}

registermessage () {
	local prefixed=

	while [ $# -gt 0 ]; do
		case "$1" in
		verbose)
			verbose () {
				message_ "I: $*"
			}
		;;
		no-verbose)
			verbose () {
				:
			}
		;;
		domain)
			shift ||:

			case "$1" in
			-) ;; # use default domain
			*) MESSAGE_DOMAIN_="$1" ;;
			esac
		;;
		prefix-message)
			prefixed=yes
		;;
		no-prefix-message)
			prefixed=
		;;
		esac
		shift ||:
	done

	if [ -n "$prefixed" ]; then
		message_ () {
			message "${MESSAGE_DOMAIN_}: $*"
		}
	else
		message_ () {
			message "$*"
		}
	fi
}

registermessage no-prefix-message no-verbose

# portable which(1)
pathfind () {
	local oldifs="$IFS"; IFS=':'

	local p
	for p in $PATH; do
		if [ -x "$p/$*" ] && [ -f "$p/$*" ]; then
			IFS="$oldifs"
			return 0
		fi
	done

	IFS="$oldifs"

	return 1
}

pkgfind () {
	case "$(LC_ALL=C dpkg-query -W -f='${Package} ${Status}\n' $1 2>/dev/null)" in
	*" ok installed") return 0 ;;
	*) return 1 ;;
	esac
}

# ask for yes/no with a default answer
yesno () {
	local default prompt answer

	default=${2:-'y'}

	case "$default" in
	[yY]*) prompt="[Y/n]" ;;
	[nN]*) prompt="[y/N]" ;;
	esac

        while :; do
                echo -n "$1 $prompt "
                read answer
		
		case "${answer:-$default}" in
		[yY] | [yY][eE] | [yY][eE][sS])
			return 0
			;;
		[nN] | [nN][oO])
			return 1
			;;
		*)
			echo "Type '[y]es' or '[n]o'"
			;;
		esac
        done
}

PATH=$PATH:/var/lib/gems/1.8/bin
export PATH

SECT_PATTERN='[0-9]/_posts'
DATE_PATTERN='[1-2][0-9][0-9][0-9]-[0-1][1-9]-[0-3][0-9]'
ID_PATTERN='[0-9][0-9]*' # şartları biraz toleranslı yap, em az iki rakam
POST_PATTERN="$DATE_PATTERN-$ID_PATTERN.*"

current () {
	head -n 1
}

next () {
	awk -F/ 'NR == 1 {
		cat  = $1
		slug = $2

		$0 = $3

		sub(/^.*-/, "")
		split($0, f, ".")
		fmt = "%0" length(f[1]) "d"
		newid = sprintf(fmt, f[1]+1)
		ext = f[2]

		print cat "/" slug "/" "'$(
			date +'%Y-%m-%d'
		)'" "-" newid "." ext
	}'
}

listposts () {
	ls -t ${1:-[0-9]}/_posts/$POST_PATTERN 2>/dev/null
}

currentpost () {
	listposts "$@" | current
}

nextpost () {
	listposts "$@" | next
}

checksect () {
	local sect="$1"
	if [ -n "$sect" ]; then
		case "$sect" in
		[01279])
			if [ ! -d "$sect/_posts" ]; then
				die "önce lütfen uygun bir $sect dizini oluşturun"
			fi
		;;
		*)
			die "kategori $sect 0, 1, 2, 7 veya 9 olmalı"
		;;
		esac
	fi
}

editor () {
	local preferred=${EDITOR:-vi}
	EDITOR_USED="$preferred"
	if tty -s; then
		$EDITOR_USED "$@"
	else
		$EDITOR_USED "$@" </dev/tty
	fi

}

getmd5sum () {
	local file="$1"
	if [ -f "$file" ]; then
		md5sum "$file" | cut -f1 -d' '
	fi
}

isgedit_used () {
	case "$EDITOR_USED" in gedit*) return 0 ;; esac
	return 1
}

ischanged () {
	local post="$1" md5sum="$2"
	case "$(getmd5sum $post)" in
	"$md5sum") return 1 ;;
	*) return 0 ;;
	esac
}
### END 19 - AUTOGENERATED, DO NOT EDIT!

